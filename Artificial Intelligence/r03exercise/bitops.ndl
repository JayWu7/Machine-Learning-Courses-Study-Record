
(* Manipulation of bit-vectors by the operations of
     increment +1,
     shift left, and::
     inverting some of the bottom bits.
   Objective: obtain the goal vector with fewest possible operations.
*)

type bits = [0..5];

decl B[bits] : bool;

(* Incrementing a 6 bit vector:
   Turn vwxyz0 to vwxyz1
   Turn vwxy01 to vwxy10
   Turn vwx011 to vwx100
   Turn vw0111 to vw1000
   Turn v01111 to v10000
   Turn 011111 to 100000
*)

action inc()
true
=>
if not B[0] then B[0] := 1
else if not B[1] then {B[1] := 1; B[0] := 0;}
else if not B[2] then {B[2] := 1; B[1] := 0; B[0] := 0;}
else if not B[3] then {B[3] := 1; B[2] := 0; B[1] := 0; B[0] := 0;}
else if not B[4] then {B[4] := 1; B[3] := 0; B[2] := 0; B[1] := 0; B[0] := 0;}
else if not B[5] then {B[5] := 1; B[4] := 0; B[3] := 0; B[2] := 0; B[1] := 0; B[0] := 0;};

(* Shift: Turn uvwxyz to vwxyz0 *)

action shift()
true
=>
B[5] := B[4];
B[4] := B[3];
B[3] := B[2];
B[2] := B[1];
B[1] := B[0];
B[0] := 0;

(* Invert 3 least significant bits: uvwxyz to uvwXYZ,
     where X is x complemented, i.e. 0 becomes 1 and 1 becomes 0.
*)


action invert210()
true
=>
B[2] := not B[2];
B[1] := not B[1];
B[0] := not B[0];

(* Initial vector is 000001
   Only needs to list the bits that are 1. Others are 0 by default.
*)

initial
B[0] := 1;

(* Goal vector is 111010. *)

goal B[5] & B[4] & B[3] & not B[2] & B[1] & not B[0];
